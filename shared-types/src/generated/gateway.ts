/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check endpoint for API routes
         * @description Returns the health status of the gateway API
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description API is healthy */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HealthResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/leagues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user's leagues (proxied to league service)
         * @description Returns all leagues for the authenticated user. This request is proxied to the league service.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of user's leagues */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["League"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new league (proxied to league service)
         * @description Creates a new league. This request is proxied to the league service.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateLeagueRequest"];
                };
            };
            responses: {
                /** @description League created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["League"];
                    };
                };
                /** @description Bad request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/leagues/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get league details (proxied to league service)
         * @description Returns details for a specific league. This request is proxied to the league service.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The league ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description League details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LeagueWithMembers"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description League not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        /**
         * Update league (proxied to league service)
         * @description Updates an existing league. This request is proxied to the league service.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The league ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateLeagueRequest"];
                };
            };
            responses: {
                /** @description League updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["League"];
                    };
                };
                /** @description Bad request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized - Invalid or missing token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description League not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/leagues/{id}/join": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Join a league (proxied to league service)
         * @description Allows a user to join an existing league. This request is proxied to the league service.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The league ID to join */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully joined the league */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Successfully joined league */
                            message?: string;
                            league?: components["schemas"]["League"];
                        };
                    };
                };
                /** @description Bad request - Already a member or league is full */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized - Invalid or missing token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description League not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/leagues/{id}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get league members (proxied to league service)
         * @description Returns the list of members in a specific league. This request is proxied to the league service.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The league ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of league members */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LeagueMember"][];
                    };
                };
                /** @description Unauthorized - Invalid or missing token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description League not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Auth service health check (proxied)
         * @description Proxies health check request to the auth service
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Auth service is healthy */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example ok */
                            status?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a new user (proxied to auth service)
         * @description Creates a new user account. This request is proxied to the auth service.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** Format: email */
                        email: string;
                        password: string;
                        confirmPassword: string;
                    };
                };
            };
            responses: {
                /** @description User registered successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login user (proxied to auth service)
         * @description Authenticates a user and returns a JWT token. This request is proxied to the auth service.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** Format: email */
                        email: string;
                        password: string;
                    };
                };
            };
            responses: {
                /** @description Login successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid credentials */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/google": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Initiate Google OAuth login (proxied to auth service)
         * @description Redirects to Google OAuth consent screen
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Redirect to Google OAuth */
                302: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/google/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Google OAuth callback (proxied to auth service)
         * @description Handles the callback from Google OAuth and returns a JWT token
         */
        get: {
            parameters: {
                query?: {
                    /** @description OAuth authorization code from Google */
                    code?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OAuth login successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthResponse"];
                    };
                };
                /** @description OAuth login failed */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change user password (proxied to auth service)
         * @description Changes the password for an authenticated user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ChangePasswordRequest"];
                };
            };
            responses: {
                /** @description Password changed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Password changed successfully */
                            message?: string;
                        };
                    };
                };
                /** @description Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized or invalid old password */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/protected": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Protected route example (proxied to auth service)
         * @description A protected route that requires authentication
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Access granted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Access granted to protected route */
                            message?: string;
                            user?: {
                                /** @example 1 */
                                id?: number;
                                /** @example user@example.com */
                                email?: string;
                            };
                        };
                    };
                };
                /** @description Unauthorized - invalid or missing token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gateway health check endpoint
         * @description Returns the health status of the SFL Gateway
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Gateway is healthy */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HealthResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        HealthResponse: {
            /** @example ok */
            status?: string;
            /**
             * Format: date-time
             * @example 2023-01-01T00:00:00.000Z
             */
            timestamp?: string;
            /** @example sfl-gateway */
            service?: string;
            /** @example 1.0.0 */
            version?: string;
        };
        RegisterRequest: {
            /**
             * Format: email
             * @description User email address
             * @example user@example.com
             */
            email: string;
            /**
             * @description User password (minimum 8 characters)
             * @example password123
             */
            password: string;
        };
        LoginRequest: {
            /**
             * Format: email
             * @description User email address
             * @example user@example.com
             */
            email: string;
            /**
             * @description User password
             * @example password123
             */
            password: string;
        };
        ChangePasswordRequest: {
            /**
             * @description Current password
             * @example oldpassword123
             */
            oldPassword: string;
            /**
             * @description New password (minimum 8 characters)
             * @example newpassword123
             */
            newPassword: string;
        };
        AuthResponse: {
            /**
             * @description JWT authentication token
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
             */
            token?: string;
            user?: {
                /**
                 * @description User ID
                 * @example 1
                 */
                id?: number;
                /**
                 * Format: email
                 * @description User email
                 * @example user@example.com
                 */
                email?: string;
            };
        };
        ErrorResponse: {
            /**
             * @description Error message
             * @example Invalid credentials
             */
            error?: string;
        };
        League: {
            /**
             * Format: uuid
             * @description League unique identifier
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id?: string;
            /**
             * @description League name
             * @example Premier League 2024
             */
            name?: string;
            /**
             * @description League description
             * @example A competitive fantasy football league
             */
            description?: string;
            /**
             * @description Maximum number of members allowed
             * @example 12
             */
            maxMembers?: number;
            /**
             * @description Current number of members
             * @example 8
             */
            currentMembers?: number;
            /**
             * Format: date-time
             * @description League creation timestamp
             * @example 2024-01-15T10:30:00Z
             */
            createdAt?: string;
            /**
             * Format: uuid
             * @description ID of the user who created the league
             * @example 456e7890-e89b-12d3-a456-426614174001
             */
            createdBy?: string;
        };
        CreateLeagueRequest: {
            /**
             * @description League name
             * @example Premier League 2024
             */
            name: string;
            /**
             * @description League description
             * @example A competitive fantasy football league
             */
            description?: string;
            /**
             * @description Maximum number of members (2-20)
             * @example 12
             */
            maxMembers: number;
        };
        UpdateLeagueRequest: {
            /**
             * @description League name
             * @example Premier League 2024 Updated
             */
            name?: string;
            /**
             * @description League description
             * @example An updated competitive fantasy football league
             */
            description?: string;
            /**
             * @description Maximum number of members (2-20)
             * @example 15
             */
            maxMembers?: number;
        };
        LeagueWithMembers: components["schemas"]["League"] & {
            members?: components["schemas"]["LeagueMember"][];
        };
        LeagueMember: {
            /**
             * Format: uuid
             * @description Member unique identifier
             * @example 789e0123-e89b-12d3-a456-426614174002
             */
            id?: string;
            /**
             * Format: uuid
             * @description User ID of the member
             * @example 456e7890-e89b-12d3-a456-426614174001
             */
            userId?: string;
            /**
             * @description Username of the member
             * @example john_doe
             */
            username?: string;
            /**
             * Format: email
             * @description Email of the member
             * @example john@example.com
             */
            email?: string;
            /**
             * Format: date-time
             * @description When the user joined the league
             * @example 2024-01-20T14:30:00Z
             */
            joinedAt?: string;
            /**
             * @description Whether this member is the league owner
             * @example false
             */
            isOwner?: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
